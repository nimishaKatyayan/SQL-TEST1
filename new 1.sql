Question 1: Customer Order History with Data Cleaning

"Write a SQL query to retrieve the first name, last name, email and the order id, 
order date and total amount for each order placed by all valid customers."
"Remove entries with invalid or missing email addresses (NULL values or strings not containing an @ symbol), 
invalid order dates, and orders associated with customer IDs that don't exist in the Customers table. 
Also, please remove any duplicate customers based on customer id and email."
"Sort the results by customer's last name, then by order date in descending order."
Expected Output: A table with columns: first_name, last_name, email, order_id, order_date, total_amount.
 Should not include Jane Doe (invalid email, date), Peter Jones (missing email), the order with customer_id = 999, and duplicate customer id 8.
 
 
--------------------------------------------------------------------------------------------------------
QUERY:
	
SELECT first_name, last_name, email, order_id, order_date, sum(total_amount)
 FROM Customers C1 INNER JOIN Orders O1 
  ON C1.customer_id = O1.customer_id
  WHERE email LIKE '%@%' AND order_date IN (
    SELECT    order_date
    FROM    Orders
    WHERE parseDateTimeBestEffortOrNull(toString(order_date)) IS NOT NULL) 
    GROUP BY 1,2,3,4,5
    ORDER BY 2,4 DESC


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 2: Product Sales by Category, Excluding Bad Data

"Write a SQL query to calculate the total revenue generated by each valid product category. 
Exclude products with NULL prices, negative prices, or a category of 'Unknown'."
"The query should return the category name and the total revenue."
"Order the results by total revenue in descending order."
Expected Output: A table with columns: category, total_revenue. 
The 'Unknown' category should be excluded, and products with NULL or negative prices should not contribute to the total revenue calculation.
-----------------------------------------------------------------------------------
--query

SELECT category, SUM(price) AS total_revenue
FROM Products 
WHERE price > 0
GROUP BY category
ORDER BY total_revenue DESC

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 3: Customers and Reviews

"Write a SQL query to retrieve the first name, last name of customers, along with the product name they reviewed, 
and the average rating given to that product by those customers."
"Only include customers who have left at least one review."
"Order the results by product name and then by average rating in descending order."
Expected Output: A table with columns: first_name, last_name, product_name, average_rating

SELECT first_name, last_name, product_name, AVG(rating)AS average_rating
FROM ProductReviews T1 INNER JOIN Customers T2 
ON T1.customer_id = T2.customer_id
INNER JOIN Products T3 
ON T1.product_id = T3.product_id
WHERE review_text IS NOT NULL
GROUP BY 1,2,3
ORDER BY product_name ,average_rating DESC

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 4: Promotions and Sales, Considering Valid Data

"Write a SQL query to determine the total sales amount for products that were under promotion on the day of the order, 
considering only valid orders, order items, and promotions. Please also remove the duplicate OrderItems"
"Exclude orders with invalid dates or negative total amounts, order items with zero or negative quantities, 
products with NULL prices, and promotions with invalid dates (start date after end date)."
"Return the product name and the total sales amount during the promotion period. 
Note: An order is considered to be 'under promotion' if the order date falls between the promotion's start and end dates."
"Order the results by total sales amount in descending order."
Expected Output: A table with columns: product_name, total_sales_amount. 
Should exclude any data identified as invalid according to the instructions.

--QUERY

SELECT
    T3.product_name,
    SUM(T2.quantity * T3.price) AS total_sales_amount
FROM
    Orders T1
JOIN (
    SELECT DISTINCT order_item_id, order_id, product_id, quantity
    FROM OrderItems
    WHERE quantity > 0
) T2 ON T1.order_id = T2.order_id
JOIN Products T3 ON T2.product_id = T3.product_id
JOIN Promotions promo ON promo.product_id = T3.product_id
WHERE
    T1.order_date IS NOT NULL
    AND T1.total_amount >= 0
    AND T3.price IS NOT NULL
    AND promo.start_date <= promo.end_date
    AND T1.order_date BETWEEN promo.start_date AND promo.end_date
GROUP BY
    T3.product_name
ORDER BY
    total_sales_amount DESC;
	
	
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 5: Top Performing Products by Country

"Write a SQL query to find the top 3 best-selling products (by total quantity sold) in each country."
"The query should return the country, product name, and total quantity sold. Use window functions to achieve this."
Expected Output: A table with columns: country, product_name, total_quantity_sold	

-------------------------------------------------------------------------------------
--query

SELECT
    country,
    product_name,
    total_quantity_sold
FROM (
    SELECT
        T4.country AS country,
        T3.product_name AS product_name,
        SUM(T2.quantity) AS total_quantity_sold,
        RANK() OVER (PARTITION BY T4.country ORDER BY SUM(T2.quantity) DESC) AS rnk
    FROM
        Orders T1
    INNER JOIN OrderItems T2 ON T1.order_id = T2.order_id
    INNER JOIN Products T3 ON T2.product_id = T3.product_id
    INNER JOIN Customers T4 ON T1.customer_id = T4.customer_id
    WHERE
        T2.quantity > 0
    GROUP BY
        T4.country, T3.product_name
) AS ranked
WHERE
    rnk <= 3
ORDER BY
    country,
    rnk;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++